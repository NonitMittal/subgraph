type Series @entity {
    id: ID!
    seriesMetadataUri: String!
    seriesMetadata: SeriesMetadata!
    books: [Book!]!
}

type Book @entity {
    id: ID!
    publisherAddress: Bytes!
    publishedOn: BigInt!
    editions: [Edition!]!
    salesRevenue: BigInt!
    royaltyRevenue: BigInt!
    distributionRevenue: BigInt!
    transferVolume: BigInt!
    withdrawableRevenue: BigInt!
    pricedBookPrinted: BigInt!
    distributedBooksPrinted: BigInt!
}

type Edition @entity {
    id: ID!
    bookId: BigInt!
    editionMetadataUri: String!
    editionMetadata: EditionMetadata!
    price: BigInt!
    royalty: BigInt!
    supplyLimited: Boolean!
    pricedBookSupplyLimit: BigInt!
    contributions: [Contribution!]!
    revisedOn: BigInt!
    salesRevenue: BigInt!
    royaltyRevenue: BigInt!
    distributionRevenue: BigInt!
    transferVolume: BigInt!
    withdrawableRevenue: BigInt!
    pricedBookPrinted: BigInt!
    distributedBooksPrinted: BigInt!
}

type EditionMetadata @entity {
    id: ID!
    title: String!
    subtitle: String!
    language: String!
    description: String!
    coverPage: String!
    copyrights: String!
    keywords: [String!]!
    genres: [String!]!
    currency: String!
}

type SeriesMetadata @entity {
    id: ID!
    title: String!
    description: String!
    keywords: [String!]!
}

interface UserProfile {
    username: String!
    name: String!
    aboutMe: String
    handles: [String!]!
}

type ReaderProfile implements UserProfile @entity {
    id: ID!
    username: String
    name: String
    aboutMe: String
    handles: [String!]!
    purchasedCopies: [Copy!]! @derivedFrom(field: "owner")
    receivedCopies: [DistributedCopy!]! @derivedFrom(field: "receiver")
}

type ContributorProfile implements UserProfile @entity {
    id: ID!
    username: String
    name: String
    aboutMe: String
    handles: [String!]!
    contributions: [Contribution!]! @derivedFrom(field: "contributor")
}

type Contribution @entity {
    id: ID!
    contributor: ContributorProfile!
    role: String!
    share: BigInt!
    edition: Edition!
}

type Copy @entity {
    id: ID!
    edition: Edition!
    owner: ReaderProfile!
    previousOwner: ReaderProfile!
    lockedWith: Bytes!
    originalPrice: BigInt!
    purchasedOn: BigInt!
}

type DistributedCopy @entity {
    id: ID!
    edition: Edition!
    receiver: ReaderProfile!
    originalPrice: BigInt!
    receivedOn: BigInt!
}
